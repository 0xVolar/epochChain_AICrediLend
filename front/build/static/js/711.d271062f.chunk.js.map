{"version":3,"file":"static/js/711.d271062f.chunk.js","mappings":"qNAKA,MAAMA,EAAsBC,IAAgB,CAC1CC,KAAM,8BACNC,QAASF,IAQJ,MAAMG,EAAgBC,WAAAA,GAAA,KACnBC,aAAuC,KAAK,KAC5CC,gBAAkB,4CAA6C,CAGvE,kBAAMC,GACJ,IACE,MAAMC,EAASC,EAAAA,EAAcC,YAC7B,IAAKF,EAAQ,MAAM,IAAIG,MAAM,kCAE7B,MAAMC,EAAM,CACV,mDACA,yEACA,2DACA,4EAIF,OADAC,KAAKR,aAAe,IAAIS,EAAAA,GAAgBD,KAAKP,gBAAiBM,EAAKJ,IAC5D,CACT,CAAE,MAAOO,GAEP,OADAC,QAAQD,MAAM,gEAAeA,IACtB,CACT,CACF,CAGA,oBAAME,GACJ,IAIE,GAHAC,EAAAA,EAAMC,SAASpB,GAAmB,IAE7Bc,KAAKR,oBAAoBQ,KAAKN,gBAC9BM,KAAKR,aAAc,MAAM,IAAIM,MAAM,wCAExC,MAAMS,QAAgBP,KAAKR,aAAaY,iBAOxC,OALAC,EAAAA,EAAMC,SAxCyB,CACnClB,KAAM,8BACNC,QAsCsC,CAChCmB,aAAcP,EAAAA,GAAmBM,MAGnCF,EAAAA,EAAMC,SAASpB,GAAmB,IAC3Be,EAAAA,GAAmBM,EAC5B,CAAE,MAAOL,GAGP,MAFAC,QAAQD,MAAM,0DAAcA,GAC5BG,EAAAA,EAAMC,SAASpB,GAAmB,IAC5BgB,CACR,CACF,CAGAO,6BAAAA,CAA8BC,GAC5B,MAAMC,EAASV,EAAAA,GAAkBS,GAC3BE,EAAsB,IAATD,EAAe,KAC5BE,EAAWF,EAASC,EAE1B,MAAO,CACLE,eAAgBb,EAAAA,GAAmBW,GACnCG,aAAcd,EAAAA,GAAmBY,GAErC,CAGA,sBAAMG,CAAiBL,GACrB,IAEE,GADKX,KAAKR,oBAAoBQ,KAAKN,gBAC9BM,KAAKR,aAAc,MAAM,IAAIM,MAAM,wCAExC,MAAMmB,QAAWjB,KAAKR,aAAawB,iBAAiBf,EAAAA,GAAkBU,IAMtE,aALMM,EAAGC,aAGHlB,KAAKI,kBAEJ,CACT,CAAE,MAAOF,GAEP,MADAC,QAAQD,MAAM,gEAAeA,GACvBA,CACR,CACF,CAGA,sBAAMiB,CAAiBC,EAAgBT,GACrC,IAEE,GADKX,KAAKR,oBAAoBQ,KAAKN,gBAC9BM,KAAKR,aAAc,MAAM,IAAIM,MAAM,wCAExC,MAAMmB,QAAWjB,KAAKR,aAAa2B,iBAAiBC,EAAQnB,EAAAA,GAAkBU,IAM9E,aALMM,EAAGC,aAGHlB,KAAKI,kBAEJ,CACT,CAAE,MAAOF,GAEP,MADAC,QAAQD,MAAM,8CAAYA,GACpBA,CACR,CACF,EAGF,MACA,EADwB,IAAIZ,C","sources":["services/riskPoolService.ts"],"sourcesContent":["import { ethers } from 'ethers';\nimport walletService from './walletService';\nimport { store } from '../store';\n\n// 由于循环依赖问题，先定义action类型\nconst setRiskPoolLoading = (loading: boolean) => ({\n  type: 'riskPool/setRiskPoolLoading',\n  payload: loading\n});\n\nconst updateRiskPoolInfo = (info: any) => ({\n  type: 'riskPool/updateRiskPoolInfo',\n  payload: info\n});\n\nexport class RiskPoolService {\n  private poolContract: ethers.Contract | null = null;\n  private contractAddress = '0x123456789abcdef123456789abcdef123456789a'; // 风险池合约地址\n  \n  // 初始化合约\n  async initContract() {\n    try {\n      const signer = walletService.getSigner();\n      if (!signer) throw new Error('未连接钱包');\n      \n      const abi = [\n        \"function getPoolBalance() view returns (uint256)\",\n        \"function distributeInterest(uint256 amount) returns (uint256, uint256)\",\n        \"function addPenaltyToPool(uint256 amount) returns (bool)\",\n        \"function compensateLender(address lender, uint256 amount) returns (bool)\"\n      ];\n      \n      this.poolContract = new ethers.Contract(this.contractAddress, abi, signer);\n      return true;\n    } catch (error) {\n      console.error('初始化风险池合约失败:', error);\n      return false;\n    }\n  }\n  \n  // 获取风险池总额\n  async getPoolBalance() {\n    try {\n      store.dispatch(setRiskPoolLoading(true));\n      \n      if (!this.poolContract) await this.initContract();\n      if (!this.poolContract) throw new Error('合约未初始化');\n      \n      const balance = await this.poolContract.getPoolBalance();\n      \n      store.dispatch(updateRiskPoolInfo({\n        totalBalance: ethers.formatEther(balance)\n      }));\n      \n      store.dispatch(setRiskPoolLoading(false));\n      return ethers.formatEther(balance);\n    } catch (error) {\n      console.error('获取风险池余额失败:', error);\n      store.dispatch(setRiskPoolLoading(false));\n      throw error;\n    }\n  }\n  \n  // 计算利息分配\n  calculateInterestDistribution(interestAmount: string) {\n    const amount = ethers.parseEther(interestAmount);\n    const toRiskPool = amount * 20n / 100n; // 20%进入风险池\n    const toLender = amount - toRiskPool; // 80%给贷款人\n    \n    return {\n      riskPoolAmount: ethers.formatEther(toRiskPool),\n      lenderAmount: ethers.formatEther(toLender)\n    };\n  }\n  \n  // 将罚金添加到风险池\n  async addPenaltyToPool(amount: string) {\n    try {\n      if (!this.poolContract) await this.initContract();\n      if (!this.poolContract) throw new Error('合约未初始化');\n      \n      const tx = await this.poolContract.addPenaltyToPool(ethers.parseEther(amount));\n      await tx.wait();\n      \n      // 更新风险池信息\n      await this.getPoolBalance();\n      \n      return true;\n    } catch (error) {\n      console.error('添加罚金到风险池失败:', error);\n      throw error;\n    }\n  }\n  \n  // 从风险池中补偿贷款人\n  async compensateLender(lender: string, amount: string) {\n    try {\n      if (!this.poolContract) await this.initContract();\n      if (!this.poolContract) throw new Error('合约未初始化');\n      \n      const tx = await this.poolContract.compensateLender(lender, ethers.parseEther(amount));\n      await tx.wait();\n      \n      // 更新风险池信息\n      await this.getPoolBalance();\n      \n      return true;\n    } catch (error) {\n      console.error('补偿贷款人失败:', error);\n      throw error;\n    }\n  }\n}\n\nconst riskPoolService = new RiskPoolService();\nexport default riskPoolService;\n"],"names":["setRiskPoolLoading","loading","type","payload","RiskPoolService","constructor","poolContract","contractAddress","initContract","signer","walletService","getSigner","Error","abi","this","ethers","error","console","getPoolBalance","store","dispatch","balance","totalBalance","calculateInterestDistribution","interestAmount","amount","toRiskPool","toLender","riskPoolAmount","lenderAmount","addPenaltyToPool","tx","wait","compensateLender","lender"],"sourceRoot":""}